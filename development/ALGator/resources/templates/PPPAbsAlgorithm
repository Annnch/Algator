import si.fri.algotest.entities.VariableSet;
import si.fri.algotest.entities.EVariable;
import si.fri.algotest.entities.VariableType;
import si.fri.algotest.entities.TestCase;
import si.fri.algotest.execute.AbsAlgorithm;
import si.fri.algotest.global.ErrorStatus;


/**
 *
 * @author ...
 */
public abstract class <PPP>AbsAlgorithm extends AbsAlgorithm {

  <PPP>TestCase <pPP>TestCase;

  // TODO: define project-specific result type class and instantinate result object
  // (i.e. an object to hold a result of the execute method)
  // ProjectSpecificResultType algorithmResult = new ProjectSpecificResultType();

  @Override
  public TestCase getTestCase() {
    return <pPP>TestCase;
  }

  @Override
  public ErrorStatus init(TestCase test) {
    if (test instanceof <PPP>TestCase) {
      <pPP>TestCase = (<PPP>TestCase) test;
      return ErrorStatus.STATUS_OK;
    } else
      return ErrorStatus.setLastErrorMessage(ErrorStatus.ERROR_CANT_PERFORM_TEST, "Invalid test:" + test);
  }
  
  @Override
  public void run() {
    // TODO: call execute method with appropriate parameters
    // execute(<pPP>TestCase.attribute1, <pPP>TestCase.attribute2, ..., algorithmResult);
  }

  
  @Override
  public VariableSet done() {
    VariableSet variables = new VariableSet(<pPP>TestCase.getParameters());

    // TODO: calculate indicators and set variable values
    // String correctness = checkCorrectness(algorithmResult) ? "OK" : "NOK";
    // EVariable passVar = new EVariable("Check", VariableType.STRING, correctness);
    // variables.addVariable(passVar);
          
    return variables;
  }   

  // TODO: define the parameters of the execute method
  //protected abstract void execute(...);
  
}

