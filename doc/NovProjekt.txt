Naloge administratorja projekta

A. definira problem
B. definira strukturo testnih množic in poda vsaj eno testno množico
C. določi vhodne in izhodne parametre
D. poda vsaj en testen algoritem  

(v nadaljevanju bomo z <data_root> označevali mapo, na katero kaže spremenljivka 
sistemska $ALGATOR_DATA_ROOT).


A) DEFINICIJA PROBLEMA in POSTAVITEV DIREKTORIJSKE STRUKTURE

1) Administrator izbere ime projekta (v nadaljevanju <proj_name>) in ime osnovnega algoritma 
   za reševanje problemov tega projekta (v nadaljevanju <alg_name>). 

   Primer: <proj_name> = Sorting, <alg_name> = BubbleSort.

2) V folderju <data_root>/projects  ustvari direktorij PROJ-<proj_name> (ta folder 
   bomo imenoval <proj_root>) in v njem ustvari vse datoteke, ki sestavljajo projekt. 

   i)   Za osnovo lahko vzame vse datoteke iz direktorija <data_root>/projects/PROJ_Templete 
        ter jih skopira v <proj_root>, 
   ii)  vse datoteke v <proj_root> ter in poddirektorijih smiselno preimenuje 
        (PPP -> <proj_name>, AAA -> <alg_name>),  
   iii) uredi datoteko proj/PPP.atp ter algs/ALG-<alg_name>/<alg_name>.atal
   



B) DEFINICIJA STRUKTURE TESTNIH MNOŽIC

1) Določi način predstavitve testnih vhodnih podatkov za en test.

Primer za projekt MatrixMul (množenje matrik): 
Vhodni podatki: matrike. 
Administrator se odloči, da bodo vhodne  matrike shranjene vsaka v svoji tekstovni datoteki, ki 
bo vsebovala zaporedje celih števil (int); prvi podatek: velikost matrike  n, temu sledi n*n števil. 

2) Določi način zapisa ene testne množice (kakšna bo vsebina opisne datoteke).

Primer: 
Administrator se odloči, da bodo vsi testi ene testne množice opisani v eni opisni datoteki. Vsaka 
vrstica te datoteke bo vsebovala opis enega testa in sicer: ime testa, ime skupine teste, dimenzijo 
n ter imena datotek s tremi matrikami. Primer: 
 
    test1:rnd:10:matrix-1.txt:matrix-2.txt:matrix-1x2.txt.


3) Ustvari eno opisno datoteko, recimo testset1.txt
4) podatke o testni množici vpiše v datoteko <proj_root>/tests/TestSet1.atts. 


C) VHODNI IN IZHODNI PARAMETRI

1) Administrator določi vhodne parametre, to je parametre, ki bodo opisovali posamezen test 
(recimo: velikost testa (N), skupina, v katero spada test (group), ...).  

2) Administrator določi izhodne paramtere, to je parametre, ki bodo opisovali posamezen rezultat 
(recimo: čas izračuna, kakovost rešitve, ...).

3) Vhodne in izhodne parametre opiše v datoteki <proj_root>/proj/<proj_name>-em.atrd .



D) NETBEANS projekt

Administrator mora napisati 4 javanske razrede (3 za projekt in enega za testni algoritem).  
Najlažje je, če v ta namen ustvari Netbeans projekt:

1) Nekje na lokalnem disku ustvari NetBeans projekt (recimo <proj_name>Admin). 

2) V projekt <proj_name>Admin doda (Properties/Sources/Add folder ...) dve mapi z izvorno kodo 
(source folders): <proj_root>/proj/src in <proj_root>/algs/ALG-<alg_name>/src

5) Projekt poveže s knjižnico ALGator.jar (Libraries/Add JAR/Folder)

6) V vseh src datotekah nadomesti PPP z <proj_name> in AAA z <alg_name>.



E) JAVANSKI RAZREDI

1) <proj_root>/proj/src/<proj_name>TestCase.java
Definiraj atribute, ki opisujejo en problem (vhodni podatki, rešitev, ...) ter metodo toString 
(kratek prikaz problema; primer: pri problemu Sort lahko toString metoda vrne prvih 10 elementov 
tabele).

2) <proj_root>/proj/src/<proj_name>TestSetIterator.java
Razred PPPTestSetIterator.java predpostavlja, da vsaka vrstica opisne datoteke podaja en test, 
zato razširja razred DefaultTestSetIterator.  V primeru, da je tudi v našem projektu testna 
množica zapisana na enak način, potem je treba dopolniti le metodo getCurrent (ki iz currentInputLine 
prebere vse podatke in ustvari testcase z vsemi podatki). Če pa je testna množica opisana kako drugače, 
je treba spremeniti razred PPPTestSetItarator tako, da bo razširjal AbstractTestSetIterator in napisati 
tudi ostale metode tega razreda (ta možnost bo prišla v poštev zelo redko!). 

Pozor: v metodi getCurrent je treba (obvezno!) definirati vse VHODNE parametre (parametri, ki so 
navedeni v atrd datoteki pod TestParameters). Vrednosti teh parametrov preberemo iz testa. Poleg 
tega mora testcase vsebovati tudi parameter TestIDParameter (vrednost, ki ENOLIČNO opredeljuje test 
znotraj tega testseta). 

Test: Če je vse prav, mora sedaj metoda main v PPPTestSetIterator izpisati vse testne primere testne 
množice, ki je definirana v TestSet1.



3) <proj_root>/proj/src/<proj_name>AbsAlgorithm.java
  - definiraj glavo metode execute (kakšne parametre bo imela ta metoda)
  - v metodi init pripravi vse parametre, ki se bodo uporabili v metodi run
  - v metodi run kliči metodo execute 
  - v metodi done preveri rezultat, ki ga je vrnila metoda execute in obvezno nastavi vse izhodne 
  parametre (parametri, ki so opisani v atrd datoteki pod ResultParameters). 


4) <proj_root>/algs/ALG-<alg_name>/src/<alg_name>Algorithm.java
Implementiraj execute metodo, ki reši eno nalogo danega problema.

